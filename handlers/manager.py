from typing import Optional, Dict
import telegram
from telegram.ext import CallbackContext

from config.settings import MANAGER_CHAT_ID
from database.queries import get_user_bookings
from utils.logger import logger

def is_manager(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    return str(chat_id) == str(MANAGER_CHAT_ID)

def handle_manager_commands(update: telegram.Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    chat_id = update.effective_chat.id
    
    if not is_manager(chat_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        return

    command = update.message.text.lower()
    
    try:
        if command == '/bookings':
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            bookings = get_all_bookings()
            if bookings:
                message = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
                for booking in bookings:
                    message += (
                        f"üìÖ {booking['date_time']}\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {booking['user_id']}\n"
                        f"üéØ –£—Å–ª—É–≥–∞: {booking['service_name']}\n"
                        f"üë©‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {booking['specialist_name']}\n"
                        "-------------------\n"
                    )
                update.message.reply_text(message)
            else:
                update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                
        elif command == '/stats':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º
            stats = get_booking_stats()
            message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total']}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats['active']}\n"
                f"–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats['cancelled']}\n"
                f"–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today']}"
            )
            update.message.reply_text(message)
            
        else:
            update.message.reply_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/bookings - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏\n"
                "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}", exc_info=True)
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

def get_all_bookings() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            SELECT b.id, b.user_id, b.date_time,
                   s.title as service_name, sp.name as specialist_name
            FROM bookings b
            JOIN services s ON b.service_id = s.id
            JOIN specialists sp ON b.specialist_id = sp.id
            WHERE b.date_time > NOW()
              AND b.status = 'active'
            ORDER BY b.date_time
        """)
        rows = cur.fetchall()
        return [{
            'id': r[0],
            'user_id': r[1],
            'date_time': r[2].strftime("%Y-%m-%d %H:%M"),
            'service_name': r[3],
            'specialist_name': r[4]
        } for r in rows]
    finally:
        cur.close()
        conn.close()

def get_booking_stats() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å—è–º"""
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cur.execute("SELECT COUNT(*) FROM bookings")
        total = cur.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cur.execute("""
            SELECT COUNT(*) FROM bookings 
            WHERE status = 'active' AND date_time > NOW()
        """)
        active = cur.fetchone()[0]
        
        # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cur.execute("SELECT COUNT(*) FROM bookings WHERE status = 'cancelled'")
        cancelled = cur.fetchone()[0]
        
        # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        cur.execute("""
            SELECT COUNT(*) FROM bookings 
            WHERE status = 'active' 
              AND date_time::date = CURRENT_DATE
        """)
        today = cur.fetchone()[0]
        
        return {
            'total': total,
            'active': active,
            'cancelled': cancelled,
            'today': today
        }
    finally:
        cur.close()
        conn.close()
