import json
from typing import Optional, Dict
import telegram

from config.settings import TOKEN, DATABASE_URL, GPT_MODEL, MANAGER_CHAT_ID
from database.queries import (
    get_services,
    find_service_by_name,
    get_specialists,
    get_available_times,
    create_booking,
    get_service_name,
    get_specialist_name,
    find_available_specialist
)
from database.models import set_user_state, delete_user_state
from services.gpt import get_gpt_response
from utils.logger import logger
from utils.time_utils import parse_time_input

def handle_list_services(update: telegram.Update, gpt_response_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ action LIST_SERVICES"""
    services = get_services()
    if services:
        service_list = "\n".join([f"- {s[1]}" for s in services])
        update.message.reply_text(f"{gpt_response_text}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n{service_list}")
    else:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")

def handle_select_service(
    update: telegram.Update,
    user_id: int,
    extracted_data: Dict,
    gpt_response_text: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ action SELECT_SERVICE"""
    service_name = extracted_data.get('service')
    if not service_name:
        services = get_services()
        service_list = "\n".join([f"- {s[1]}" for s in services])
        update.message.reply_text(
            f"{gpt_response_text}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n{service_list}"
        )
        return

    service = find_service_by_name(service_name)
    if not service:
        services = get_services()
        service_list = "\n".join([f"- {s[1]}" for s in services])
        update.message.reply_text(
            f"–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{service_list}"
        )
        return

    service_id, service_name = service
    specialists = get_specialists(service_id=service_id)
    if not specialists:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")
        return

    set_user_state(user_id, "select_specialist", service_id=service_id)
    specialists_info = []
    for spec in specialists:
        available_times = get_available_times(spec[0], service_id)
        if available_times:
            specialists_info.append(
                f"üë©‚Äçüíº {spec[1]}\n   –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n   " + 
                "\n   ".join([f"üïê {t}" for t in available_times])
            )
    
    if specialists_info:
        update.message.reply_text(
            f"–î–ª—è —É—Å–ª—É–≥–∏ '{service_name}' –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:\n\n" +
            "\n\n".join(specialists_info)
        )
    else:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")

def handle_select_specialist(
    update: telegram.Update,
    user_id: int,
    state: Dict,
    extracted_data: Dict,
    gpt_response_text: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ action SELECT_SPECIALIST"""
    if not state or not state.get('service_id'):
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.")
        return

    specialist_name = extracted_data.get('specialist')
    specialists = get_specialists(state['service_id'])
    
    if not specialist_name:
        specialists_text = "\n".join([f"- {s[1]}" for s in specialists])
        update.message.reply_text(
            f"{gpt_response_text}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:\n{specialists_text}"
        )
        return

    specialist = next(
        (s for s in specialists if s[1].lower() == specialist_name.lower()),
        None
    )
    
    if not specialist:
        specialists_text = "\n".join([f"- {s[1]}" for s in specialists])
        update.message.reply_text(
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{specialists_text}"
        )
        return

    available_times = get_available_times(specialist[0], state['service_id'])
    if available_times:
        set_user_state(
            user_id, 
            "select_time",
            service_id=state['service_id'],
            specialist_id=specialist[0]
        )
        times_text = "\n".join([f"- {t}" for t in available_times])
        update.message.reply_text(
            f"{gpt_response_text}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n{times_text}"
        )
    else:
        update.message.reply_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist[1]} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        )

def handle_select_time(
    update: telegram.Update,
    user_id: int,
    state: Dict,
    extracted_data: Dict,
    bot: telegram.Bot
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ action SELECT_TIME"""
    if not state or not all(k in state for k in ['service_id', 'specialist_id']):
        services = get_services()
        if services:
            services_text = "\n".join([f"- {s[1]}" for s in services])
            update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
                f"{services_text}"
            )
        return

    available_times = get_available_times(state['specialist_id'], state['service_id'])
    
    if not available_times:
        alternative_specialist = find_available_specialist(state['service_id'], state['specialist_id'])
        if alternative_specialist:
            set_user_state(
                user_id,
                "select_specialist",
                service_id=state['service_id']
            )
            update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ {alternative_specialist[1]}. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è?"
            )
        else:
            update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        return

    chosen_time = None
    gpt_time = extracted_data.get('time')
    if gpt_time:
        chosen_time = parse_time_input(gpt_time, available_times)

    if chosen_time:
        set_user_state(
            user_id,
            "confirm",
            service_id=state['service_id'],
            specialist_id=state['specialist_id'],
            chosen_time=chosen_time
        )
        service_name = get_service_name(state['service_id'])
        specialist_name = get_specialist_name(state['specialist_id'])
        update.message.reply_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
            f"üéØ –£—Å–ª—É–≥–∞: {service_name}\n"
            f"üë©‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist_name}\n"
            f"üìÖ –í—Ä–µ–º—è: {chosen_time}\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
    else:
        times_text = "\n".join([f"üïê {t}" for t in available_times])
        update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{times_text}"
        )

def handle_confirm_booking(
    update: telegram.Update,
    user_id: int,
    state: Dict,
    user_text: str,
    gpt_response_text: str,
    bot: telegram.Bot
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ action CONFIRM_BOOKING"""
    if not state or not all(k in state for k in ['service_id', 'specialist_id', 'chosen_time']):
        update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        return

    if user_text.lower() in ['–¥–∞', 'yes', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é']:
        success = create_booking(
            user_id=user_id,
            serv_id=state['service_id'],
            spec_id=state['specialist_id'],
            date_str=state['chosen_time']
        )
        if success:
            service_name = get_service_name(state['service_id'])
            specialist_name = get_specialist_name(state['specialist_id'])
            update.message.reply_text(f"{gpt_response_text}")
            
            if MANAGER_CHAT_ID:
                bot.send_message(
                    MANAGER_CHAT_ID,
                    f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                    f"–£—Å–ª—É–≥–∞: {service_name}\n"
                    f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist_name}\n"
                    f"–í—Ä–µ–º—è: {state['chosen_time']}\n"
                    f"–ö–ª–∏–µ–Ω—Ç ID: {user_id}"
                )
        else:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        update.message.reply_text(f"{gpt_response_text}")
    
    delete_user_state(user_id)

def handle_booking_with_gpt(update: telegram.Update, user_id: int, user_text: str, state: Optional[Dict] = None):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT"""
    try:
        result = get_gpt_response(user_id, user_text, state)
        
        action = result.get('action')
        extracted_data = result.get('extracted_data', {})
        gpt_response_text = result.get('response', '')

        if action == "LIST_SERVICES":
            handle_list_services(update, gpt_response_text)
            
        elif action == "SELECT_SERVICE":
            handle_select_service(update, user_id, extracted_data, gpt_response_text)
            
        elif action == "SELECT_SPECIALIST":
            handle_select_specialist(update, user_id, state, extracted_data, gpt_response_text)
            
        elif action == "SELECT_TIME":
            handle_select_time(update, user_id, state, extracted_data, update.message.bot)
            
        elif action == "CONFIRM_BOOKING":
            handle_confirm_booking(update, user_id, state, user_text, gpt_response_text, update.message.bot)
            
        elif action == "CANCEL_BOOKING":
            delete_user_state(user_id)
            update.message.reply_text(f"{gpt_response_text}")
            
        else:
            update.message.reply_text(gpt_response_text or "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT –¥–ª—è user {user_id}: {e}", exc_info=True)
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
        )
